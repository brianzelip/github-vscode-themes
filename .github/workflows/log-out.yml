# This is a basic workflow to help you get started with Actions

name: Log out

# Controls when the action will run.
on: [push, workflow_dispatch]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Save latest upstream release metadata to file
        id: upstream-release
        run: |
          curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/primer/github-vscode-theme/releases/latest -u "brianzelip:${{ secrets.GH_API_PAT }}" > temp-release.json

      - name: Define version vars
        id: versions
        run: |
          echo ::set-output name=upstreamTag::$(jq -r '.tag_name' temp-release.json)
          echo ::set-output name=upstreamDate::$(jq -r '.created_at' temp-release.json | cut -c 1-10)
          echo ::set-output name=upstreamUrl::$(jq -r '.html_url' temp-release.json)
          echo ::set-output name=localTag::$(jq -r '.config.latestUpstreamReleaseTag' package.json)

      - name: Trim version strings
        id: trims
        if: steps.versions.outputs.localTag != steps.versions.outputs.upstreamTag
        run: |
          # Trim the v from tag names (ie: v4.1.1)
          # -E on mac instead of -r
          echo "::set-output name=upstreamTagTrimmed::$(echo ${{steps.versions.outputs.upstreamTag}} | sed -r 's/^.{1}//')"
          echo "::set-output name=localTagTrimmed::$(echo ${{steps.versions.outputs.localTag}} | sed -r 's/^.{1}//')"
          # Verify work
          echo "upstreamTag: ${{steps.versions.outputs.upstreamTag}}"
          echo "localTag: ${{steps.versions.outputs.localTag}}"

      - name: Update themes
        if: steps.versions.outputs.localTag != steps.versions.outputs.upstreamTag
        run: |
          git clone https://github.com/primer/github-vscode-theme.git
          cd ./github-vscode-theme
          git checkout ${{ steps.versions.outputs.upstreamTag }}
          npm ci
          npm run build
          rm ../dist/*.json
          cp themes/*.json ../dist/
          cd ..
          rm -rf ./github-vscode-theme

      - name: Bump versions
        if: steps.versions.outputs.localTag != steps.versions.outputs.upstreamTag
        run: |
          # Bump main version prop in package*.json
          npm --no-git-tag-version version ${{steps.versions.outputs.upstreamTag}}
          # Runner uses legacy npm v6, so bump v7 lockfile manually with
          jq '.packages[""].version |= "${{steps.versions.outputs.upstreamTag}}"' package-lock.json > temp-lock.json
          # jq won't do in-place updates in a file (like `sed -i`), so recreate lock file
          mv temp-lock.json package-lock.json
          # Record latest upstream release for the future
          jq '.config.latestUpstreamReleaseTag |= "${{steps.versions.outputs.upstreamTag}}"' package.json > temp-pkg.json
          mv temp-pkg.json package.json
          # Verify work
          cat package.json
          cat package-lock.json

      - name: Update changelog
        if: steps.versions.outputs.localTag != steps.versions.outputs.upstreamTag
        run: |
          # figure out how to use sed to update changelog
          sed -i '0,/##/s//## [${{steps.trims.outputs.upstreamTagTrimmed}}] - ${{steps.versions.outputs.upstreamDate}}\n\n&/' CHANGELOG.md
          # sed '/[${{steps.trims.outputs.localTagTrimmed}}]:/s//[${{steps.trims.outputs.upstreamTagTrimmed}}]: ${{steps.versions.outputs.upstreamUrl}}\n\n&/" CHANGELOG.md
          sed -i 's/^\[${{steps.trims.outputs.localTagTrimmed}}\]:/[${{steps.trims.outputs.upstreamTagTrimmed}}]: ${{steps.versions.outputs.upstreamUrl}}\n&/' CHANGELOG.md
          # Verify work
          cat CHANGELOG.md
        # TODO - insert the second changelog update (link to tag) before the most recent link to tag (ie: instead of appending to the bottom of file, insert before most recent link)

      # Runs a set of commands using the runners shell

#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
