name: Log out

on:
  schedule:
    - cron: '34 13 * * *'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Save latest upstream release metadata to file
        id: upstream-release
        run: |
          curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/primer/github-vscode-theme/releases/latest -u "brianzelip:${{ secrets.GH_API_PAT }}" > temp-release.json

      - name: Define version vars
        id: versions
        run: |
          echo ::set-output name=upstreamTag::$(jq -r '.tag_name' temp-release.json)
          echo ::set-output name=upstreamDate::$(jq -r '.created_at' temp-release.json | cut -c 1-10)
          echo ::set-output name=upstreamUrlEscaped::$(jq -r '.html_url' temp-release.json | sed 's/\//\\\//g')
          echo ::set-output name=localTag::$(jq -r '.config.latestUpstreamReleaseTag' package.json)

      - name: Trim version strings
        id: trims
        if: steps.versions.outputs.localTag != steps.versions.outputs.upstreamTag
        run: |
          # Trim the v from tag names (ie: v4.1.1)
          # -E on mac instead of -r
          echo "::set-output name=upstreamTagTrimmed::$(echo ${{steps.versions.outputs.upstreamTag}} | sed -r 's/^.{1}//')"
          echo "::set-output name=localTagTrimmed::$(echo ${{steps.versions.outputs.localTag}} | sed -r 's/^.{1}//')"

      - name: Verify var data
        if: steps.versions.outputs.localTag != steps.versions.outputs.upstreamTag
        run: |
          echo "upstreamTag: ${{ steps.versions.outputs.upstreamTag }}"
          echo "upstreamDate: ${{ steps.versions.outputs.upstreamDate }}"
          echo "upstreamUrlEscaped: ${{ steps.versions.outputs.upstreamUrlEscaped }}"
          echo "localTag: ${{ steps.versions.outputs.localTag }}"          
          echo "upstreamTagTrimmed: ${{steps.trims.outputs.upstreamTagTrimmed}}"
          echo "localTagTrimmed: ${{steps.trims.outputs.localTagTrimmed}}"

      - name: Update themes
        if: steps.versions.outputs.localTag != steps.versions.outputs.upstreamTag
        run: |
          rm -rf ./dist
          git clone https://github.com/primer/github-vscode-theme.git
          cd ./github-vscode-theme
          git checkout ${{ steps.versions.outputs.upstreamTag }}
          npm ci
          npm run build
          mv themes ../dist

      - name: Clean up
        if: steps.versions.outputs.localTag != steps.versions.outputs.upstreamTag
        run: |
          rm -rf ./github-vscode-theme
          rm temp-release.json
          # Verify work
          ls -al
          ls -al dist/

      - name: Bump versions
        if: steps.versions.outputs.localTag != steps.versions.outputs.upstreamTag
        run: |
          # Bump main version prop in package*.json
          npm --no-git-tag-version version ${{steps.versions.outputs.upstreamTag}}
          # Runner uses legacy npm v6, so bump v7 lockfile manually
          jq '.packages[""].version |= "${{steps.versions.outputs.upstreamTag}}"' package-lock.json > temp-lock.json
          # jq won't do in-place updates in a file (like `sed -i`), so recreate lock file
          mv temp-lock.json package-lock.json
          # Record latest upstream release for the future
          jq '.config.latestUpstreamReleaseTag |= "${{steps.versions.outputs.upstreamTag}}"' package.json > temp-pkg.json
          mv temp-pkg.json package.json
          # Verify work
          cat package.json
          cat package-lock.json

      - name: Update changelog
        if: steps.versions.outputs.localTag != steps.versions.outputs.upstreamTag
        run: |
          # Add top level release info
          sed -i '0,/##/s//## [${{steps.trims.outputs.upstreamTagTrimmed}}] - ${{steps.versions.outputs.upstreamDate}}\n\n&/' CHANGELOG.md
          # Add bottom level release link
          sed -i 's/^\[${{steps.trims.outputs.localTagTrimmed}}\]:/[${{steps.trims.outputs.upstreamTagTrimmed}}]: ${{steps.versions.outputs.upstreamUrlEscaped}}\n&/' CHANGELOG.md
          # Verify work
          cat CHANGELOG.md

      - name: Commit new release
        if: steps.versions.outputs.localTag != steps.versions.outputs.upstreamTag
        run: |
          # see https://github.com/actions/checkout#Push-a-commit-using-the-built-in-token
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "ðŸ¤–: Auto update to ${{steps.versions.outputs.upstreamTag}}"
          git push

      - name: Tag new release
        if: steps.versions.outputs.localTag != steps.versions.outputs.upstreamTag
        run: |
          git tag ${{steps.versions.outputs.upstreamTag}}
          git push origin ${{steps.versions.outputs.upstreamTag}}
